automation: !include_dir_merge_list automations

# Setup Crisp icon as picture for the van tracker
homeassistant:
  customize:
    device_tracker.crisp_van:
      entity_picture: "/local/crisp-128.jpg"

rest:
  # Next order REST sensor
  # - get the latest 2 orders: assumption is that there are no more orders to be delivered than that
  - resource: "https://crisp.nl/v1/order/history?limit=2"
    scan_interval: 600
    headers:
      # Logged in as Thijs
      "Authorization": !secret crisp_authorization
      # Identify as android app from around 2023-04-27
      "X-Crisp-Agent": "crisp/47dcbf595b/app/android/471"
      "User-Agent": "Home Assistant"
    sensor:
      - name: "Crisp next order raw"
        # TODO: Mark unavailable when cancel/done and after day of delivery, then hide in UI
        value_template: >-
          {% if value_json.data[0] is not none %}
            available
          {% else %}
            unavailable
          {% endif %}
        json_attributes_path: "$.data[0]"
        json_attributes:
          - "id"
          - "fulfillStatus"
          - "deliveryLink"
          - "editable"
          - "finalPrice"

      # Raw list of the next few orders
      # - calculate all other sensors from here
      - name: "Crisp next orders input"
        value_template: >-
          {% if value_json is not none and value_json.data is not none %}
            {{ value_json.data | length }}
          {% else %}
            0
          {% endif %}
        json_attributes:
        - 'data'
      # Delivery day like "Saturday"
      - name: "Crisp next order day"
        # TODO: add relative dates like 'today' and 'tomorrow'
        value_template: >-
          {% set deliveryDate = as_timestamp(strptime(value_json.data[0].deliverySlot.date, '%Y-%m-%d'), default=None) %}
          {% if deliveryDate is not none %}
            {{ deliveryDate | timestamp_custom('%A', '<missing>' }}
          {% else %}
            {{ None }}
          {% endif %}
      # Selected time slot like "between 18:00 and 22:00"
      - name: "Crisp next order selected timeslot"
        value_template: "between {{ value_json.data[0].deliverySlot.start }} and {{ value_json.data[0].deliverySlot.end }}"
      # Number of products and recipes
      - name: "Crisp next order contents"
        # TODO: hide parts when zero
        # TODO: add recipes, userRecipes, mealkits
        value_template: "{{ value_json.data[0].products | length }} products, {{ value_json.data[0].recipes | length }} recipes"
      # Feedback givven
      - name: "Crisp next order feedback given"
        value_template: "{{ value_json.data[0].feedback.rating }}"

  # Tracking link REST sensor
  - resource_template: >-
      {# Get the data from the actual tracking link (and convert the public link to the data url) #}
      {% if state_attr('sensor.crisp_next_order_input', 'order') is not none and state_attr('sensor.crisp_next_order_input', 'order').deliveryLink is not none %}
        https://tracking.routigo.com/api/customer/tracking/{{ state_attr('sensor.crisp_next_order_input', 'order').deliveryLink | replace("https://tracking.routigo.com/?trackingCode=", '') }}

      {# Fallback to dummy file (otherwise it will keep retrying a dead link) TODO; fix this #}
      {% else %}
        {{ states('input_text.crisp_tracking_fallback_url') }}
      {% endif %}
    # Never trigger automatically, automation will request updates (note: still does a request on boot)
    scan_interval: 99999999
    headers:
      # Identify as Home Assistant
      "User-Agent": "Home Assistant"
    sensor:
      - name: "Crisp next order tracking"
        # Indicates if the fallback url has been queried
        value_template: >-
          {% if value_json is not defined or 'unavailable' in value_json %}
            unavailable
          {% else %}
            available
          {% endif %}
        json_attributes_path: "$.deliveryInformation"
        json_attributes:
          - "courierName"
          - "latitude"
          - "longitude"
          - "stopsTillArrival"
          - "windowBeforeETA"
          - "windowAfterETA"
          - "eta"
          - "doneTime"
      - name: "Crisp next order tracking location"
        # Indicates if the fallback url has been queried
        value_template: >-
          {% if value_json is not defined or 'unavailable' in value_json or value_json.courierLocation is none or value_json.courierLocation.latitude is none %}
            unavailable
          {% else %}
            available
          {% endif %}
        json_attributes_path: "$.courierLocation"
        json_attributes:
          - "latitude"
          - "longitude"
          - "course"

# Parse the next order time into a nice string
template:
  - sensor:
      # Select the order to highlight from the raw list of orders from Crisp
      - name: Crisp next order input
        unique_id: crisp_next_order_input
        state: "nothing"
        availability: >-
          {{ state_attr('sensor.crisp_next_orders_input', 'data') is not none }}
        attributes:
          order: >-
            {% set orders = state_attr('sensor.crisp_next_orders_input', 'data') %}
            {% if orders is none %}
              {{ None }}
            {% else %}
              {{
                orders
                | selectattr('fulfillStatus', '!=', 'done')
                | selectattr('fulfillStatus', '!=', 'cancel')
                | selectattr('fulfillStatus', '!=', 'manual')
                | selectattr('fulfillStatus', '!=', '')
                | list
                | last
                | default(None)
              }}
            {% endif %}

  # TODO: implement availability based on the fact that there is an order
  - sensor:
      - name: Crisp next order
        unique_id: crisp_next_order
        state: "{{ states('sensor.crisp_next_order_day') }} {{ states('sensor.crisp_next_order_selected_timeslot') }}"
        # Future: detect editing state by polling basket as well?
        availability: >-
          {{ state_attr('sensor.crisp_next_order_input', 'order') is not none }}
        icon: >-
          {% set order = state_attr('sensor.crisp_next_order_input', 'order') %}
          {% set fulfillStatus = order.fulfillStatus %}

          {# Cancelled, end state #}
          {% if fulfillStatus == 'cancel' %}
            mdi:cancel

          {# Delivered, end state #}
          {% elif fulfillStatus == 'done' %}
            mdi:check-outline

          {# Delivery is ongoing, link available #}
          {% elif order.deliveryLink is not none %}
            mdi:truck

          {# Editable, before cutoff #}
          {% elif order.editable %}
            mdi:pencil

          {# Not editable, not picked yet either #}
          {% elif fulfillStatus == 'ready' %}
            mdi:clock

          {# Picked, but not getting delivered yet #}
          {% elif fulfillStatus == 'picked' %}
            mdi:pickaxe

          {# Generic fallback #}
          {% else %}
            mdi:basket
          {% endif %}
        attributes:
          app_link: "com.freshfoodventures.crisp:///order/{{ state_attr('sensor.crisp_next_order_input', 'order').id }}"
          details: >-
            {% set order = state_attr('sensor.crisp_next_order_input', 'order') %}
            {% set feedback_given = not is_state('sensor.crisp_next_order_feedback_given', '') %}

            {# Delivered #}
            {% if order.fulfillStatus == 'done' %}
              {% if feedback_given %}
                Delivered, and rated as {{ states('sensor.crisp_next_order_feedback_given') }}
              {% else %}
                Delivered, tap to give feedback
              {% endif %}

            {# Cancelled #}
            {% elif order.fulfillStatus == 'cancel' %}
              Cancelled

            {# Show tracking details while there is a tracking link #}
            {% elif order.deliveryLink is not none %}
              {{ states('sensor.crisp_next_order_tracking_details') }}

            {# Show order content before/after delivery #}
            {% else %}
              {{ states('sensor.crisp_next_order_contents') }}
            {% endif %}

      # TODO: set available state?
      - name: Crisp next order tracking details
        unique_id: crisp_next_order_tracking_details
        state: >-
          {# Collector for list of extra parts of info #}
          {% set extras = namespace(parts=[]) %}

          {# Add driver name #}
          {% set courier = state_attr('sensor.crisp_next_order_tracking', 'courierName') %}
          {% if courier is not none %}
            {% set extras.parts = extras.parts + ['driver '+courier] %}
          {% endif %}

          {# Add distance #}
          {% set van_meters = states('sensor.crisp_van_distance') %}
          {% if van_meters is not none and van_meters != 'not set' %}
            {% set van_meters = van_meters | int(default=0) %}
            {% if van_meters > 0 %}
              {% if van_meters > 2000 %}
                {% set van_meters = ((van_meters/1000) | round(1)) | string + ' km' %}
              {% else %}
                {% set van_meters = van_meters | string + ' m' %}
              {% endif %}
              {% set extras.parts = extras.parts + [van_meters + ' away'] %}
            {% endif %}
          {% endif %}

          {# Stops left #}
          {% set stops_left = state_attr('sensor.crisp_next_order_tracking', 'stopsTillArrival') %}
          {% if stops_left is not none and stops_left > 0 %}
            {% if stops_left == 0 %}
              {% set extras.parts = extras.parts + ['next stop'] %}
            {% elif stops_left == 1 %}
              {% set extras.parts = extras.parts + ['1 stop left'] %}
            {% else %}
              {% set extras.parts = extras.parts + [stops_left | string + ' stops left'] %}
            {% endif %}
          {% endif %}

          {# Built expected at line #}
          {% set eta = as_timestamp(state_attr('sensor.crisp_next_order_tracking', 'eta'), default=None) %}
          {% if eta is not none %}
            {% set result = 'Expected at ' + (eta | timestamp_custom('%H:%M', '<missing>')) %}
          {% else %}
            {% set result = None %}
          {% endif %}

          {% if result is not none %}
            {% if extras.parts|length > 0 %}
              {% set result = result + ' (' + (extras.parts | join(', ')) + ')' %}
            {% endif %}

            {# Return result #}
            {{ result }}
          {% else %}
          Unavailable
          {% endif %}
  - binary_sensor:
      - name: Crisp next order show on home
        unique_id: crisp_next_order_show_on_home
        # Only hide when done and feedback is given
        state: >-
          {{ not is_state_attr('sensor.crisp_next_order_raw', 'fulfillStatus', 'done') or is_state('sensor.crisp_next_order_feedback_given', '') }}
        availability: >-
          {{ state_attr('sensor.crisp_next_order_raw', 'fulfillStatus') is not none }}

# Cannot use secrets directly in templates, so use this helper to get around that
input_text:
  crisp_tracking_fallback_url:
    name: Fallback url
    initial: !secret crisp_tracking_fallback_url
