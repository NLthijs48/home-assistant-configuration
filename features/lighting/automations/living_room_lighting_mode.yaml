# Set the correct living room lighting mode based on the time of day and other sensors

# Day mode
- alias: 'Living room lighting mode to day'
  trigger:
    - platform: time
      at: "06:00"
  action:
    - service: script.living_room_lighting_mode
      data:
        mode: day

# Cooking mode
#- alias: 'Living room lighting mode to cooking at 18:00'
#  trigger:
#    - platform: time
#      at: "18:00"
#  action:
#    - service: script.living_room_lighting_mode
#      data:
#        mode: cooking

# Evening mode
- alias: 'Living room lighting mode to evening'
  trigger:
    - platform: time
      at: "19:30"
  action:
    - service: script.living_room_lighting_mode
      data:
        mode: evening

# Night mode
- alias: 'Living room lighting mode to night (weekend)'
  trigger:
    - platform: time
      at: "23:30"
  condition:
    - condition: time
      weekday:
      - fri
      - sat
  action:
    - service: script.living_room_lighting_mode
      data:
        mode: night
- alias: 'Living room lighting mode to night (weekday)'
  trigger:
  - platform: time
    at: "22:00"
  condition:
  - condition: time
    weekday:
    - sun
    - mon
    - tue
    - wed
    - thu
  action:
  - service: script.living_room_lighting_mode
    data:
      mode: night


# Set brightness depending on the mode
- alias: Living room lights turn on brightness
  id: living_room_lights_mode_brightness
  trigger:
    - platform: state
      entity_id: input_boolean.living_room_in_use
      to: 'on'
    - platform: state
      entity_id: input_select.living_room_lighting_mode
    - platform: state
      entity_id: input_boolean.light_outside
  condition:
    - condition: state
      entity_id: input_boolean.living_room_in_use
      alias: "Living room is in use"
      state: 'on'
    - condition: template
      alias: "Stop control when set to manual"
      value_template: "{{ not is_state('input_select.living_room_lighting_mode', 'manual') }}"
  action:
    - variables:
        lighting_mode: "{{ states('input_select.living_room_lighting_mode') }}"
        light_outside: "{{ is_state('input_boolean.light_outside', 'on') }}"
    - choose:
        # If not enabled by a timer, and no-one in the living room
        - conditions:
          - condition: template
            value_template: '{{ lighting_mode == "day" and light_outside }}'
          sequence:
          - service: light.turn_off
            entity_id: light.living_room_lights
      # Else turn on with correct brightness
      default:
        - service: light.turn_on
          data:
            entity_id: light.living_room_ceiling
            transition: 5
            brightness_pct: >-
              {{ {
                "day": 80,
                "cooking": 70,
                "evening": 25,
                "night": 5,
              }[lighting_mode] }}
        - service: light.turn_on
          data:
            entity_id: light.dining_ceiling
            transition: 5
            brightness_pct: >-
              {{ {
                "day": 40,
                "cooking": 30,
                "evening": 10,
                "night": 5,
              }[lighting_mode] }}
        - service: light.turn_on
          data:
            entity_id: light.kitchen_ceiling
            transition: 5
            brightness_pct: >-
              {{ {
                "day": 60,
                "cooking": 80,
                "evening": 15,
                "night": 5,
              }[lighting_mode] }}

# Turn off when no-one present
- alias: Living room lights turn off (no-one present)
  id: living_room_lights_off_presence
  trigger:
    - platform: state
      entity_id: input_boolean.living_room_in_use
      to: 'off'
      # Wait a bit before turning off, to support walking upstairs to get something
      for:
        minutes: 2
  action:
    - service: light.turn_off
      data:
        entity_id: light.living_room_lights
